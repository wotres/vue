## 작업 일지
# npm 사용할 수 있게 초기화
npm init
# npm install
npm i vue vue-router vuex
# 개발단계에서만 사용하는 npm install
npm i css-loader vue-loader vue-style-loader vue-template-compiler webpack webpack-cli webpack-dev-server -D
# webpack.config.js 파일 작성
# package.json 파일 -> scripts 부분 -> 
webpack --watch 을 통해 빌드 실시간 감시
Hot Module Reloading
# 서버를 통한 빌드, 새로고침 자동화
webpack-dev-server --hot 을 통해 수정된 부분만 리로드 해주는 부분 모듈 리로딩
webpack-dev-server --inline 전체 페이지에 대한 실시간 리로딩을
같이 사용하면 hot 이 먼저 작동하여 부분 리로딩을 한뒤 부분 리로딩이 안될경우 전체 페이지 리로딩이 발생한다.
주의! -> 위와 같이 dev-server를 사용할때에 빌드된 파일이 위치하는 경로를 publicPath에 지정해줘야함

## 정리
# v-on
v-on="" 으로 자바스크립트를 처리하는 이벤트 핸들링 
@ 로 대체 가능
# v-model
v-modle="" 으로 데이터를 동적으로 바인딩
# v-bind
v-bind="" 으로 속성을 동적으로 바인딩
: 으로 대체 가능
# v-show
항상 렌더링 -> 초기 렌더링 비용 높음 -> 자주 변경된다면 v-show 사용
# v-if / v-else-if / v-else
조건 true 일때 렌더링 -> false 일 떄 삭제 -> 자주 변경되지않는다면 v-if 사용
# v-for
v-for("sample in samples") 와 같이 사용
# watch
항상 감시하여 변화하는 상황을 잡아냄 
-> 많이 안쓰는게 좋음 -> 잘못 잡으면 무한 반복이나 서로 영향미치는 경우 많음

## 실행법
$ npm run dev 
localhost5000 접속
webSamples/GameMatcher아래 Router.html 실행
